diff --git a/dist/foxy/foxy.d.ts b/dist/foxy/foxy.d.ts
deleted file mode 100644
index 5562f9805209047a721520d1bbdef44fc0e0b31c..0000000000000000000000000000000000000000
--- a/dist/foxy/foxy.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { HistoryData, MarketCapResult, MarketData, MarketDataArgs, PriceHistoryArgs } from '@shapeshiftoss/types';
-import { MarketService } from '../api';
-import { CoinGeckoMarketService } from '../coingecko/coingecko';
-import { ProviderUrls } from '../market-service-manager';
-export declare const FOXY_ASSET_ID = "eip155:1/erc20:0xDc49108ce5C57bc3408c3A5E95F3d864eC386Ed3";
-export declare class FoxyMarketService extends CoinGeckoMarketService implements MarketService {
-    providerUrls: ProviderUrls;
-    constructor({ providerUrls, coinGeckoAPIKey, }: {
-        providerUrls: ProviderUrls;
-        coinGeckoAPIKey: string;
-    });
-    findAll(): Promise<MarketCapResult>;
-    findByAssetId({ assetId }: MarketDataArgs): Promise<MarketData | null>;
-    findPriceHistoryByAssetId({ assetId, timeframe, }: PriceHistoryArgs): Promise<HistoryData[]>;
-}
diff --git a/dist/foxy/foxy.js b/dist/foxy/foxy.js
deleted file mode 100644
index 4bf0a47d71042d2054c2bf325ef20f1a764516c9..0000000000000000000000000000000000000000
--- a/dist/foxy/foxy.js
+++ /dev/null
@@ -1,111 +0,0 @@
-"use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
-    if (mod && mod.__esModule) return mod;
-    var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
-    __setModuleDefault(result, mod);
-    return result;
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.FoxyMarketService = exports.FOXY_ASSET_ID = void 0;
-const chain_adapters_1 = require("@shapeshiftoss/chain-adapters");
-const investor_foxy_1 = require("@shapeshiftoss/investor-foxy");
-const unchained = __importStar(require("@shapeshiftoss/unchained-client"));
-const coingecko_1 = require("../coingecko/coingecko");
-exports.FOXY_ASSET_ID = 'eip155:1/erc20:0xDc49108ce5C57bc3408c3A5E95F3d864eC386Ed3';
-const FOX_ASSET_ID = 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d';
-const FOXY_ASSET_PRECISION = '18';
-class FoxyMarketService extends coingecko_1.CoinGeckoMarketService {
-    constructor({ providerUrls, coinGeckoAPIKey, }) {
-        super({ coinGeckoAPIKey });
-        this.providerUrls = providerUrls;
-    }
-    async findAll() {
-        try {
-            const assetId = exports.FOXY_ASSET_ID;
-            const marketData = await this.findByAssetId({ assetId });
-            return { [assetId]: marketData };
-        }
-        catch (e) {
-            console.warn(e);
-            return {};
-        }
-    }
-    async findByAssetId({ assetId }) {
-        try {
-            if (assetId.toLowerCase() !== exports.FOXY_ASSET_ID.toLowerCase()) {
-                console.warn('FoxyMarketService(findByAssetId): Failed to find by AssetId');
-                return null;
-            }
-            const coinGeckoData = await super.findByAssetId({
-                assetId: FOX_ASSET_ID,
-            });
-            if (!coinGeckoData)
-                return null;
-            const ethChainAdapter = new chain_adapters_1.ethereum.ChainAdapter({
-                providers: {
-                    ws: new unchained.ws.Client(this.providerUrls.unchainedEthereumWsUrl),
-                    http: new unchained.ethereum.V1Api(new unchained.ethereum.Configuration({
-                        basePath: this.providerUrls.unchainedEthereumHttpUrl,
-                    })),
-                },
-                rpcUrl: this.providerUrls.jsonRpcProviderUrl,
-            });
-            // Make maxSupply as an additional field, effectively EIP-20's totalSupply
-            const api = new investor_foxy_1.FoxyApi({
-                adapter: ethChainAdapter,
-                providerUrl: this.providerUrls.jsonRpcProviderUrl,
-                foxyAddresses: investor_foxy_1.foxyAddresses,
-            });
-            const tokenContractAddress = investor_foxy_1.foxyAddresses[0].foxy;
-            const foxyTotalSupply = await api.tvl({ tokenContractAddress });
-            const supply = foxyTotalSupply;
-            return {
-                price: coinGeckoData.price,
-                marketCap: '0',
-                changePercent24Hr: coinGeckoData.changePercent24Hr,
-                volume: '0',
-                supply: supply === null || supply === void 0 ? void 0 : supply.div(`1e+${FOXY_ASSET_PRECISION}`).toString(),
-                maxSupply: foxyTotalSupply === null || foxyTotalSupply === void 0 ? void 0 : foxyTotalSupply.div(`1e+${FOXY_ASSET_PRECISION}`).toString(),
-            };
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('FoxyMarketService(findByAssetId): error fetching market data');
-        }
-    }
-    async findPriceHistoryByAssetId({ assetId, timeframe, }) {
-        if (assetId.toLowerCase() !== exports.FOXY_ASSET_ID.toLowerCase()) {
-            console.warn('FoxyMarketService(findPriceHistoryByAssetId): Failed to find price history by AssetId');
-            return [];
-        }
-        try {
-            const priceHistory = await super.findPriceHistoryByAssetId({
-                assetId: FOX_ASSET_ID,
-                timeframe,
-            });
-            return priceHistory;
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('FoxyMarketService(findPriceHistoryByAssetId): error fetching price history');
-        }
-    }
-}
-exports.FoxyMarketService = FoxyMarketService;
diff --git a/dist/foxy/foxyMockData.d.ts b/dist/foxy/foxyMockData.d.ts
deleted file mode 100644
index 9b56a1f2695ef002812f31acd6f7e9b92f39ad86..0000000000000000000000000000000000000000
--- a/dist/foxy/foxyMockData.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { CoinGeckoMarketData } from '../coingecko/coingecko-types';
-export declare const fox: CoinGeckoMarketData;
-export declare const mockFoxyMarketData: {
-    changePercent24Hr: number;
-    marketCap: string;
-    price: string;
-    volume: string;
-    supply: string;
-    maxSupply: string;
-};
-export declare const mockFoxyPriceHistoryData: {
-    time: number;
-    priceUsd: number;
-}[];
diff --git a/dist/foxy/foxyMockData.js b/dist/foxy/foxyMockData.js
deleted file mode 100644
index 4444d8d0a15413e7bc3aabcb3dad5a8d115b3d92..0000000000000000000000000000000000000000
--- a/dist/foxy/foxyMockData.js
+++ /dev/null
@@ -1,28 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.mockFoxyPriceHistoryData = exports.mockFoxyMarketData = exports.fox = void 0;
-exports.fox = {
-    circulating_supply: 272087306.915483,
-    max_supply: 1000001337.0,
-    // This test data should be matching the data coming as Coingecko response.
-    // The fact that there is loss of precision at runtime doesn't matter.
-    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
-    market_cap: { usd: 76043211.3383411704757409 },
-    current_price: { usd: 0.2794809217688426 },
-    price_change_percentage_24h: 2.810767605208474,
-};
-exports.mockFoxyMarketData = {
-    changePercent24Hr: 2.810767605208474,
-    marketCap: '0',
-    price: '0.2794809217688426',
-    volume: '0',
-    supply: '52018758.965754575223841191',
-    maxSupply: '52018758.965754575223841191',
-};
-exports.mockFoxyPriceHistoryData = [
-    { time: 1623110400000, priceUsd: 0.480621954029937 },
-    { time: 1623196800000, priceUsd: 0.48541321175453755 },
-    { time: 1623283200000, priceUsd: 0.4860349080635926 },
-    { time: 1623369600000, priceUsd: 0.46897407484696146 },
-    { time: 1623456000000, priceUsd: 0.4569204315609752 },
-];
diff --git a/dist/market-service-manager.js b/dist/market-service-manager.js
index 7627756ee59700fdc612ed386ddfcef0d155a255..43a5fcd2452a951ceb2b2f4bd6c758960d167a0b 100644
--- a/dist/market-service-manager.js
+++ b/dist/market-service-manager.js
@@ -1,32 +1,16 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.MarketServiceManager = void 0;
-const providers_1 = require("@ethersproject/providers");
-const sdk_1 = require("@yfi/sdk");
 const coincap_1 = require("./coincap/coincap");
 const coingecko_1 = require("./coingecko/coingecko");
-const foxy_1 = require("./foxy/foxy");
-const osmosis_1 = require("./osmosis/osmosis");
-const yearn_tokens_1 = require("./yearn/yearn-tokens");
-const yearn_vaults_1 = require("./yearn/yearn-vaults");
 class MarketServiceManager {
     constructor(args) {
-        const { coinGeckoAPIKey = '', providerUrls, yearnChainReference } = args;
-        const { jsonRpcProviderUrl } = providerUrls;
-        // TODO(0xdef1cafe): after chain agnosticism, we need to dependency inject a chainReference here
-        // YearnVaultMarketCapService deps
-        const network = yearnChainReference !== null && yearnChainReference !== void 0 ? yearnChainReference : 1; // 1 for mainnet
-        const provider = new providers_1.JsonRpcProvider(jsonRpcProviderUrl);
-        const yearnSdk = new sdk_1.Yearn(network, { provider });
+        const { coinGeckoAPIKey = '' } = args;
         this.marketProviders = [
             // Order of this MarketProviders array constitutes the order of providers we will be checking first.
             // More reliable providers should be listed first.
             new coingecko_1.CoinGeckoMarketService({ coinGeckoAPIKey }),
             new coincap_1.CoinCapMarketService(),
-            new yearn_vaults_1.YearnVaultMarketCapService({ yearnSdk }),
-            new yearn_tokens_1.YearnTokenMarketCapService({ yearnSdk }),
-            new osmosis_1.OsmosisMarketService(),
-            new foxy_1.FoxyMarketService({ coinGeckoAPIKey, providerUrls }),
         ];
     }
     async findAll(args) {
diff --git a/dist/marketDataCLI.d.ts b/dist/marketDataCLI.d.ts
deleted file mode 100644
index cb0ff5c3b541f646105198ee23ac0fc3d805023e..0000000000000000000000000000000000000000
--- a/dist/marketDataCLI.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/dist/marketDataCLI.js b/dist/marketDataCLI.js
deleted file mode 100644
index f7bb7213bf7f6502cfe300c479d9796be5aefd70..0000000000000000000000000000000000000000
--- a/dist/marketDataCLI.js
+++ /dev/null
@@ -1,50 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-// import { JsonRpcProvider } from '@ethersproject/providers'
-const types_1 = require("@shapeshiftoss/types");
-// import { HistoryTimeframe } from '@shapeshiftoss/types'
-// import { Yearn } from '@yfi/sdk'
-// import { CoinGeckoMarketService } from './coingecko/coingecko'
-// import { YearnVaultMarketCapService } from './yearn/yearn-vaults'
-// import { YearnTokenMarketCapService } from './yearn/yearn-tokens'
-// import { OsmosisMarketService } from './osmosis/osmosis'
-const foxy_1 = require("./foxy/foxy");
-const main = async () => {
-    // const assetId = 'eip155:1/erc20:0xa258c4606ca8206d8aa700ce2143d7db854d168c' // WETH Vault
-    // const assetId = 'eip155:1/erc20:0x19d3364a399d251e894ac732651be8b0e4e85001' // yvDai Vault
-    // const assetId = 'eip155:1/erc20:0x5f18c75abdae578b483e5f43f12a39cf75b973a9' // USDC Vault
-    // const assetId = 'eip155:1/erc20:0xa696a63cc78dffa1a63e9e50587c197387ff6c7e' // BTC Vault
-    // const assetId = 'eip155:1/erc20:0x93ed140172ff226dad1f7f3650489b8daa07ae7f' // Zapper Token
-    // const assetId = 'eip155:1/erc20:0x3f1b0278a9ee595635b61817630cc19de792f506' // Zapper Token
-    // const assetId = 'cosmos:osmosis-1/slip44:118' // Osmosis
-    const assetId = foxy_1.FOXY_ASSET_ID; // FOXy
-    const timeframe = types_1.HistoryTimeframe.YEAR;
-    // const assetId = 'bip122:000000000019d6689c085ae165831e93/slip44:0' // BTC
-    // const provider = new JsonRpcProvider('https://daemon.ethereum.shapeshift.com')
-    // const yearnSdk = new Yearn(1, { provider })
-    // const yearnMarketService = new YearnTokenMarketCapService({ yearnSdk })
-    // const osmosisMarketService = new OsmosisMarketService()
-    const foxyMarketService = new foxy_1.FoxyMarketService({
-        coinGeckoAPIKey: '',
-        providerUrls: {
-            jsonRpcProviderUrl: '',
-            unchainedEthereumHttpUrl: '',
-            unchainedEthereumWsUrl: '', // REACT_APP_UNCHAINED_ETHEREUM_WS_URL
-        },
-    });
-    // const cgMarketService = new CoinGeckoMarketService()
-    // const data = await yearnMarketService.findAll()
-    // const data = await yearnMarketService.findByAssetId({ assetId })
-    const data = await foxyMarketService.findPriceHistoryByAssetId({ assetId, timeframe });
-    // const data = await foxyMarketService.findByAssetId({ assetId })
-    // const data = await foxyMarketService.findAll()
-    // const data = await yearnMarketService.findAll()
-    // const data = await cgMarketService.findPriceHistoryByAssetId({
-    //   assetId,
-    //   timeframe: HistoryTimeframe.DAY
-    // })
-    console.log({ data });
-};
-main()
-    .then(() => console.info('Done'))
-    .then(() => process.exit(0));
diff --git a/dist/osmosis/osmosis-types.d.ts b/dist/osmosis/osmosis-types.d.ts
deleted file mode 100644
index e67605b15a3cd818248d5a86de8c335b1f1b9c72..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosis-types.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-export declare type OsmosisMarketCap = {
-    price: number;
-    denom: string;
-    symbol: string;
-    liquidity: number;
-    liquidity_24h_change: number;
-    volume_24h: number;
-    volume_24h_change: number;
-    name: string;
-    price_24h_change: number;
-};
-export declare type OsmosisHistoryData = {
-    time: number;
-    close: number;
-    high: number;
-    low: number;
-    open: number;
-    volume: number;
-};
diff --git a/dist/osmosis/osmosis-types.js b/dist/osmosis/osmosis-types.js
deleted file mode 100644
index c8ad2e549bdc6801e0d1c80b0308d4b9bd4985ce..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosis-types.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/dist/osmosis/osmosis.d.ts b/dist/osmosis/osmosis.d.ts
deleted file mode 100644
index f8df9600fbc2ab7884485f5ffca4d2494c5a32af..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosis.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { HistoryData, MarketCapResult, MarketData, MarketDataArgs, PriceHistoryArgs } from '@shapeshiftoss/types';
-import { MarketService } from '../api';
-export declare class OsmosisMarketService implements MarketService {
-    baseUrl: string;
-    findAll(): Promise<MarketCapResult>;
-    findByAssetId({ assetId }: MarketDataArgs): Promise<MarketData | null>;
-    findPriceHistoryByAssetId({ assetId, timeframe, }: PriceHistoryArgs): Promise<HistoryData[]>;
-}
diff --git a/dist/osmosis/osmosis.js b/dist/osmosis/osmosis.js
deleted file mode 100644
index 5686085456cf586f87966a550e4f07091f396b5c..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosis.js
+++ /dev/null
@@ -1,137 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.OsmosisMarketService = void 0;
-const caip_1 = require("@shapeshiftoss/caip");
-const types_1 = require("@shapeshiftoss/types");
-const axios_1 = __importDefault(require("axios"));
-const bignumber_1 = require("../utils/bignumber");
-const isValidDate_1 = require("../utils/isValidDate");
-class OsmosisMarketService {
-    constructor() {
-        this.baseUrl = 'https://api-osmosis.imperator.co';
-    }
-    async findAll() {
-        const osmosisApiUrl = `${this.baseUrl}/tokens/v2/all`;
-        try {
-            const { data: osmosisData } = await axios_1.default.get(osmosisApiUrl);
-            const results = osmosisData
-                .map((data) => data !== null && data !== void 0 ? data : []) // filter out rate limited results
-                .sort((a, b) => (a.liquidity < b.liquidity ? 1 : -1))
-                .reduce((acc, token) => {
-                const assetId = caip_1.adapters.osmosisToAssetId(token.denom);
-                if (!assetId)
-                    return acc;
-                acc[assetId] = {
-                    price: token.price.toString(),
-                    marketCap: token.liquidity.toString(),
-                    volume: token.volume_24h.toString(),
-                    changePercent24Hr: token.price_24h_change,
-                    supply: (0, bignumber_1.bnOrZero)(token.liquidity).div(token.price).toString(),
-                };
-                return acc;
-            }, {});
-            return results;
-        }
-        catch (e) {
-            return {};
-        }
-    }
-    async findByAssetId({ assetId }) {
-        if (!caip_1.adapters.assetIdToOsmosis(assetId))
-            return null;
-        try {
-            const symbol = caip_1.adapters.assetIdToOsmosis(assetId);
-            const { data } = await axios_1.default.get(`${this.baseUrl}/tokens/v2/${symbol}`);
-            const marketData = data[0];
-            if (!marketData)
-                return null;
-            return {
-                price: marketData.price.toString(),
-                marketCap: marketData.liquidity.toString(),
-                volume: marketData.volume_24h.toString(),
-                changePercent24Hr: (0, bignumber_1.bnOrZero)(marketData.price_24h_change).toNumber(),
-                supply: (0, bignumber_1.bnOrZero)(marketData.liquidity).div(marketData.price).toString(),
-            };
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('MarketService(findByAssetId): error fetching market data');
-        }
-    }
-    async findPriceHistoryByAssetId({ assetId, timeframe, }) {
-        if (!caip_1.adapters.assetIdToOsmosis(assetId))
-            return [];
-        const symbol = caip_1.adapters.assetIdToOsmosis(assetId);
-        let range;
-        let isV1;
-        let start;
-        switch (timeframe) {
-            case types_1.HistoryTimeframe.HOUR:
-                range = '5';
-                isV1 = false;
-                start = 12;
-                break;
-            case types_1.HistoryTimeframe.DAY:
-                range = '60';
-                isV1 = false;
-                start = 24;
-                break;
-            case types_1.HistoryTimeframe.WEEK:
-                range = '7d';
-                isV1 = true;
-                start = (0, bignumber_1.bn)(24).times(7).toNumber();
-                break;
-            case types_1.HistoryTimeframe.MONTH:
-                range = '1mo';
-                isV1 = true;
-                start = (0, bignumber_1.bn)(24).times(30).toNumber();
-                break;
-            case types_1.HistoryTimeframe.YEAR:
-                range = '1y';
-                isV1 = true;
-                start = (0, bignumber_1.bn)(24).times(365).toNumber();
-                break;
-            case types_1.HistoryTimeframe.ALL:
-                // TODO: currently the 'all' range for v2 is returning 500 errors. Using 1y for the time being.
-                // We need to revisit this at a later date to see if it works in the future
-                range = '1y';
-                isV1 = true;
-                start = 0;
-                break;
-            default:
-                range = '1y';
-                isV1 = true;
-                start = 0;
-        }
-        try {
-            // Historical timeframe data from the v2 endpoint currently does not support ranges greater than 1 month
-            // and v1 doesn't support ranges less than 7 week, so we use both to get all ranges.
-            const url = `${this.baseUrl}/tokens/${isV1 ? 'v1' : 'v2'}/historical/${symbol}/chart?${isV1 ? 'range' : 'tf'}=${range}`;
-            const { data } = await axios_1.default.get(url);
-            // return the correct range of data points for each timeframe
-            const taperedData = data.slice(-start);
-            return taperedData.reduce((acc, current) => {
-                // convert timestamp from seconds to milliseconds
-                const date = (0, bignumber_1.bnOrZero)(current.time).times(1000).toNumber();
-                if (!(0, isValidDate_1.isValidDate)(date)) {
-                    console.error('Osmosis asset history data has invalid date');
-                    return acc;
-                }
-                const price = (0, bignumber_1.bnOrZero)(current.close);
-                acc.push({
-                    date,
-                    price: price.toNumber(),
-                });
-                return acc;
-            }, []);
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('MarketService(findPriceHistoryByAssetId): error fetching price history');
-        }
-    }
-}
-exports.OsmosisMarketService = OsmosisMarketService;
diff --git a/dist/osmosis/osmosisMockData.d.ts b/dist/osmosis/osmosisMockData.d.ts
deleted file mode 100644
index cdf5090f502249c04109db2672cf40c5f21b0998..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosisMockData.d.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { MarketData } from '@shapeshiftoss/types';
-import { OsmosisMarketCap } from './osmosis-types';
-export declare const secretNetwork: OsmosisMarketCap;
-export declare const ion: OsmosisMarketCap;
-export declare const osmo: OsmosisMarketCap;
-export declare const mockOsmosisFindAllData: {
-    data: OsmosisMarketCap[];
-};
-export declare const mockOsmosisFindByAssetId: MarketData;
-export declare const mockOsmosisYearlyHistoryData: {
-    time: number;
-    close: number;
-    high: number;
-    low: number;
-    open: number;
-}[];
-export declare const mockHourlyHistoryData: {
-    time: number;
-    close: number;
-    high: number;
-    low: number;
-    open: number;
-    volume: number;
-}[];
diff --git a/dist/osmosis/osmosisMockData.js b/dist/osmosis/osmosisMockData.js
deleted file mode 100644
index 63be87afa346c5ffa6e40c07b6b8e15965f4c935..0000000000000000000000000000000000000000
--- a/dist/osmosis/osmosisMockData.js
+++ /dev/null
@@ -1,109 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.mockHourlyHistoryData = exports.mockOsmosisYearlyHistoryData = exports.mockOsmosisFindByAssetId = exports.mockOsmosisFindAllData = exports.osmo = exports.ion = exports.secretNetwork = void 0;
-exports.secretNetwork = {
-    price: 4.5456667708,
-    denom: 'ibc/0954E1C28EB7AF5B72D24F3BC2B47BBB2FDF91BDDFD57B74B99E133AED40972A',
-    symbol: 'SCRT',
-    liquidity: 17581752.09948758,
-    liquidity_24h_change: -12.8145359477,
-    volume_24h: 3289855.395915219,
-    volume_24h_change: 2479142.2564111263,
-    name: 'Secret Network',
-    price_24h_change: -15.4199369882,
-};
-exports.ion = {
-    price: 7110.2708806483,
-    denom: 'uion',
-    symbol: 'ION',
-    liquidity: 8737040.33551496,
-    liquidity_24h_change: -14.0724963209,
-    volume_24h: 353672.5116333088,
-    volume_24h_change: 177537.462938586,
-    name: 'Ion',
-    price_24h_change: -15.5060091033,
-};
-exports.osmo = {
-    price: 8.0939512289,
-    denom: 'uosmo',
-    symbol: 'OSMO',
-    liquidity: 513382677.98398143,
-    liquidity_24h_change: -7.0051901726,
-    volume_24h: 169020038.66921267,
-    volume_24h_change: 85749118.40114057,
-    name: 'Osmosis',
-    price_24h_change: -8.5460553557,
-};
-exports.mockOsmosisFindAllData = {
-    data: [exports.secretNetwork, exports.ion, exports.osmo],
-};
-exports.mockOsmosisFindByAssetId = {
-    price: '8.0939512289',
-    marketCap: '513382677.98398143',
-    volume: '169020038.66921267',
-    changePercent24Hr: -8.5460553557,
-};
-exports.mockOsmosisYearlyHistoryData = [
-    {
-        time: 1624492800,
-        close: 5.4010989774,
-        high: 5.4141295587,
-        low: 5.0003632977,
-        open: 5.0003632977,
-    },
-    {
-        time: 1624579200,
-        close: 7.3442392291,
-        high: 7.3448735644,
-        low: 5.3572962709,
-        open: 5.4010989774,
-    },
-    {
-        time: 1624665600,
-        close: 6.2011885916,
-        high: 7.5765008227,
-        low: 6.0288315142,
-        open: 7.3442142218,
-    },
-    {
-        time: 1624752000,
-        close: 5.3994292528,
-        high: 6.2012808102,
-        low: 5.0807420392,
-        open: 6.2011885916,
-    },
-];
-exports.mockHourlyHistoryData = [
-    {
-        time: 1645279200,
-        close: 8.7099702887,
-        high: 8.7230634538,
-        low: 8.7027347275,
-        open: 8.7230634538,
-        volume: 322395.5646646317,
-    },
-    {
-        time: 1645282800,
-        close: 8.720258958,
-        high: 8.7281887188,
-        low: 8.7088941334,
-        open: 8.7099702887,
-        volume: 215774.9291578648,
-    },
-    {
-        time: 1645286400,
-        close: 8.7551263817,
-        high: 8.8301414047,
-        low: 8.7183602443,
-        open: 8.7202062522,
-        volume: 544372.0382400643,
-    },
-    {
-        time: 1645290000,
-        close: 8.7544961127,
-        high: 8.7584181833,
-        low: 8.7271467319,
-        open: 8.7551263817,
-        volume: 303458.094971553,
-    },
-];
diff --git a/dist/yearn/gql-queries.d.ts b/dist/yearn/gql-queries.d.ts
deleted file mode 100644
index 3b1552c038f9c33f68919963ae8d7d7fec5075c4..0000000000000000000000000000000000000000
--- a/dist/yearn/gql-queries.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare const ACCOUNT_HISTORIC_EARNINGS = "query AccountHistoricEarnings($id: String!, $fromDate: String!, $shareToken: String!, $toDate: BigInt!) {\n  account(id: $id) {\n    vaultPositions(where: { shareToken: $shareToken }) {\n      vault {\n        vaultDayData(where: { timestamp_gte: $fromDate, timestamp_lte: $toDate }, orderBy: timestamp, orderDirection: asc, first: 1000) {\n          pricePerShare\n          timestamp\n          tokenPriceUSDC\n        }\n      }\n    }\n  }\n}\n";
diff --git a/dist/yearn/gql-queries.js b/dist/yearn/gql-queries.js
deleted file mode 100644
index a839834ba7dd07073c499b1cde6f61510d11fd05..0000000000000000000000000000000000000000
--- a/dist/yearn/gql-queries.js
+++ /dev/null
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ACCOUNT_HISTORIC_EARNINGS = void 0;
-exports.ACCOUNT_HISTORIC_EARNINGS = `query AccountHistoricEarnings($id: String!, $fromDate: String!, $shareToken: String!, $toDate: BigInt!) {
-  account(id: $id) {
-    vaultPositions(where: { shareToken: $shareToken }) {
-      vault {
-        vaultDayData(where: { timestamp_gte: $fromDate, timestamp_lte: $toDate }, orderBy: timestamp, orderDirection: asc, first: 1000) {
-          pricePerShare
-          timestamp
-          tokenPriceUSDC
-        }
-      }
-    }
-  }
-}
-`;
diff --git a/dist/yearn/yearn-tokens.d.ts b/dist/yearn/yearn-tokens.d.ts
deleted file mode 100644
index 2289b792bc9c66fa092429090987da264e0fe623..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-tokens.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { FindAllMarketArgs, HistoryData, MarketCapResult, MarketData, MarketDataArgs } from '@shapeshiftoss/types';
-import { ChainId, Yearn } from '@yfi/sdk';
-import { MarketService } from '../api';
-declare type YearnTokenMarketCapServiceArgs = {
-    yearnSdk: Yearn<ChainId>;
-};
-export declare class YearnTokenMarketCapService implements MarketService {
-    baseUrl: string;
-    yearnSdk: Yearn<ChainId>;
-    private readonly defaultGetByMarketCapArgs;
-    constructor(args: YearnTokenMarketCapServiceArgs);
-    findAll(args?: FindAllMarketArgs): Promise<MarketCapResult>;
-    findByAssetId({ assetId: _assetId }: MarketDataArgs): Promise<MarketData | null>;
-    findPriceHistoryByAssetId(): Promise<HistoryData[]>;
-}
-export {};
diff --git a/dist/yearn/yearn-tokens.js b/dist/yearn/yearn-tokens.js
deleted file mode 100644
index fc3b224e74e1877df0a5866c896d2701cfc11498..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-tokens.js
+++ /dev/null
@@ -1,99 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.YearnTokenMarketCapService = void 0;
-const caip_1 = require("@shapeshiftoss/caip");
-const uniqBy_1 = __importDefault(require("lodash/uniqBy"));
-const config_1 = require("../config");
-const bignumber_1 = require("../utils/bignumber");
-const rateLimiters_1 = require("../utils/rateLimiters");
-const rateLimiter = (0, rateLimiters_1.createRateLimiter)(config_1.RATE_LIMIT_THRESHOLDS_PER_MINUTE.DEFAULT);
-const USDC_PRECISION = 6;
-class YearnTokenMarketCapService {
-    constructor(args) {
-        this.baseUrl = 'https://api.yearn.finance';
-        this.defaultGetByMarketCapArgs = {
-            count: 2500,
-        };
-        this.yearnSdk = args.yearnSdk;
-    }
-    async findAll(args) {
-        try {
-            const argsToUse = { ...this.defaultGetByMarketCapArgs, ...args };
-            const response = await Promise.allSettled([
-                rateLimiter(() => this.yearnSdk.tokens.supported()),
-                rateLimiter(() => this.yearnSdk.vaults.tokens()),
-            ]);
-            const [zapperResponse, underlyingTokensResponse] = response;
-            // Ignore rejected promises, return successful responses.
-            const responseTokens = [
-                ...(zapperResponse.status === 'fulfilled' ? zapperResponse.value : []),
-                ...(underlyingTokensResponse.status === 'fulfilled' ? underlyingTokensResponse.value : []),
-            ];
-            const uniqueTokens = (0, uniqBy_1.default)(responseTokens, 'address');
-            const tokens = uniqueTokens.slice(0, argsToUse.count);
-            return tokens.reduce((acc, token) => {
-                const _assetId = (0, caip_1.toAssetId)({
-                    chainNamespace: caip_1.CHAIN_NAMESPACE.Evm,
-                    chainReference: caip_1.CHAIN_REFERENCE.EthereumMainnet,
-                    assetNamespace: 'erc20',
-                    assetReference: token.address,
-                });
-                acc[_assetId] = {
-                    price: (0, bignumber_1.bnOrZero)(token.priceUsdc).div(`1e+${USDC_PRECISION}`).toString(),
-                    // TODO: figure out how to get these values.
-                    marketCap: '0',
-                    volume: '0',
-                    changePercent24Hr: 0,
-                };
-                return acc;
-            }, {});
-        }
-        catch (e) {
-            console.info(e);
-            return {};
-        }
-    }
-    async findByAssetId({ assetId: _assetId }) {
-        const address = caip_1.adapters.assetIdToYearn(_assetId);
-        if (!address)
-            return null;
-        try {
-            // the yearnSdk caches the response to all of these calls and returns the cache if found.
-            // Unfortunately, the functions do not take in an argument for a single address to return a
-            // single token, so we are limited to getting all tokens then doing a find on them to return
-            // the price to web. Doing allSettled so that one rejection does not interfere with the other
-            // calls.
-            const response = await Promise.allSettled([
-                rateLimiter(() => this.yearnSdk.tokens.supported()),
-                rateLimiter(() => this.yearnSdk.vaults.tokens()),
-            ]);
-            const [zapperResponse, underlyingTokensResponse] = response;
-            // Ignore rejected promises, return successful responses.
-            const responseTokens = [
-                ...(zapperResponse.status === 'fulfilled' ? zapperResponse.value : []),
-                ...(underlyingTokensResponse.status === 'fulfilled' ? underlyingTokensResponse.value : []),
-            ];
-            const token = responseTokens.find((tok) => tok.address === address);
-            if (!token)
-                return null;
-            return {
-                price: (0, bignumber_1.bnOrZero)(token.priceUsdc).div(`1e+${USDC_PRECISION}`).toString(),
-                marketCap: '0',
-                volume: '0',
-                changePercent24Hr: 0,
-            };
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('YearnMarketService(findByAssetId): error fetching market data');
-        }
-    }
-    async findPriceHistoryByAssetId() {
-        // TODO: figure out a way to get zapper and underlying token historical data.
-        return [];
-    }
-}
-exports.YearnTokenMarketCapService = YearnTokenMarketCapService;
diff --git a/dist/yearn/yearn-types.d.ts b/dist/yearn/yearn-types.d.ts
deleted file mode 100644
index 67f1ecfe65e9ff20c87a7b914d04e58b0fe368cd..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-types.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-declare type VaultDayDatum = {
-    pricePerShare: string;
-    timestamp: string;
-    tokenPriceUSDC: string;
-};
-declare type VaultPosition = {
-    vault: {
-        vaultDayData: VaultDayDatum[];
-    };
-};
-export declare type VaultDayDataGQLResponse = {
-    data: {
-        account: {
-            vaultPositions: VaultPosition[];
-        };
-    };
-};
-export {};
diff --git a/dist/yearn/yearn-types.js b/dist/yearn/yearn-types.js
deleted file mode 100644
index c8ad2e549bdc6801e0d1c80b0308d4b9bd4985ce..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-types.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/dist/yearn/yearn-vaults.d.ts b/dist/yearn/yearn-vaults.d.ts
deleted file mode 100644
index 4ad2c3a88b689f45020d29027ac4f035dee64d52..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-vaults.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import { FindAllMarketArgs, HistoryData, MarketCapResult, MarketData, MarketDataArgs, PriceHistoryArgs } from '@shapeshiftoss/types';
-import { ChainId, Yearn } from '@yfi/sdk';
-import { MarketService } from '../api';
-declare type YearnVaultMarketCapServiceArgs = {
-    yearnSdk: Yearn<ChainId>;
-};
-export declare class YearnVaultMarketCapService implements MarketService {
-    baseUrl: string;
-    yearnSdk: Yearn<ChainId>;
-    private readonly defaultGetByMarketCapArgs;
-    constructor(args: YearnVaultMarketCapServiceArgs);
-    findAll(args?: FindAllMarketArgs): Promise<MarketCapResult>;
-    findByAssetId({ assetId }: MarketDataArgs): Promise<MarketData | null>;
-    private getDate;
-    findPriceHistoryByAssetId({ assetId, timeframe, }: PriceHistoryArgs): Promise<HistoryData[]>;
-}
-export {};
diff --git a/dist/yearn/yearn-vaults.js b/dist/yearn/yearn-vaults.js
deleted file mode 100644
index a29e4f0b62deb3d4344a30848a9714e617c932f8..0000000000000000000000000000000000000000
--- a/dist/yearn/yearn-vaults.js
+++ /dev/null
@@ -1,228 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.YearnVaultMarketCapService = void 0;
-const caip_1 = require("@shapeshiftoss/caip");
-const types_1 = require("@shapeshiftoss/types");
-const head_1 = __importDefault(require("lodash/head"));
-const config_1 = require("../config");
-const bignumber_1 = require("../utils/bignumber");
-const isValidDate_1 = require("../utils/isValidDate");
-const rateLimiters_1 = require("../utils/rateLimiters");
-const gql_queries_1 = require("./gql-queries");
-const rateLimiter = (0, rateLimiters_1.createRateLimiter)(config_1.RATE_LIMIT_THRESHOLDS_PER_MINUTE.DEFAULT);
-const USDC_PRECISION = 6;
-class YearnVaultMarketCapService {
-    constructor(args) {
-        this.baseUrl = 'https://api.yearn.finance';
-        this.defaultGetByMarketCapArgs = {
-            count: 2500,
-        };
-        this.yearnSdk = args.yearnSdk;
-    }
-    async findAll(args) {
-        try {
-            const argsToUse = { ...this.defaultGetByMarketCapArgs, ...args };
-            const response = await rateLimiter(() => this.yearnSdk.vaults.get());
-            const vaults = response.slice(0, argsToUse.count);
-            return vaults
-                .sort((a, b) => (0, bignumber_1.bnOrZero)(a.underlyingTokenBalance.amountUsdc).lt(b.underlyingTokenBalance.amountUsdc)
-                ? 1
-                : -1)
-                .reduce((acc, yearnItem) => {
-                const assetId = (0, caip_1.toAssetId)({
-                    chainNamespace: caip_1.CHAIN_NAMESPACE.Evm,
-                    chainReference: caip_1.CHAIN_REFERENCE.EthereumMainnet,
-                    assetNamespace: 'erc20',
-                    assetReference: yearnItem.address,
-                });
-                // if amountUsdc of a yearn asset is 0, the asset has not price or value
-                if ((0, bignumber_1.bnOrZero)(yearnItem.underlyingTokenBalance.amountUsdc).eq(0)) {
-                    acc[assetId] = {
-                        price: '0',
-                        marketCap: '0',
-                        volume: '0',
-                        changePercent24Hr: 0,
-                    };
-                    return acc;
-                }
-                let volume = (0, bignumber_1.bn)('0');
-                let changePercent24Hr = 0;
-                const price = (0, bignumber_1.bnOrZero)(yearnItem.underlyingTokenBalance.amountUsdc)
-                    .div('1e+6')
-                    .div(yearnItem.underlyingTokenBalance.amount)
-                    .times(`1e+${yearnItem.decimals}`)
-                    .times(yearnItem.metadata.pricePerShare)
-                    .div(`1e+${yearnItem.decimals}`)
-                    .toString();
-                const marketCap = (0, bignumber_1.bnOrZero)(yearnItem.underlyingTokenBalance.amountUsdc)
-                    .div('1e+6')
-                    .toFixed(2);
-                const historicEarnings = yearnItem.metadata.historicEarnings;
-                const lastHistoricalEarnings = historicEarnings
-                    ? historicEarnings[historicEarnings.length - 1]
-                    : null;
-                const secondToLastHistoricalEarnings = historicEarnings
-                    ? historicEarnings[historicEarnings.length - 2]
-                    : null;
-                if (lastHistoricalEarnings && secondToLastHistoricalEarnings) {
-                    volume = (0, bignumber_1.bnOrZero)(lastHistoricalEarnings.earnings.amountUsdc).minus(secondToLastHistoricalEarnings.earnings.amountUsdc);
-                }
-                if (lastHistoricalEarnings) {
-                    changePercent24Hr =
-                        volume
-                            .div(lastHistoricalEarnings.earnings.amountUsdc)
-                            .div(`1e+${USDC_PRECISION}`)
-                            .toNumber() || 0;
-                }
-                acc[assetId] = {
-                    price,
-                    marketCap,
-                    volume: volume.abs().toString(),
-                    changePercent24Hr,
-                };
-                return acc;
-            }, {});
-        }
-        catch (e) {
-            console.info(e);
-            return {};
-        }
-    }
-    async findByAssetId({ assetId }) {
-        const id = caip_1.adapters.assetIdToYearn(assetId);
-        if (!id)
-            return null;
-        try {
-            const vaults = await rateLimiter(() => this.yearnSdk.vaults.get([id]));
-            if (!vaults || !vaults.length)
-                return null;
-            const vault = (0, head_1.default)(vaults);
-            if (!vault)
-                return null;
-            if ((0, bignumber_1.bnOrZero)(vault.underlyingTokenBalance.amountUsdc).eq(0)) {
-                return {
-                    price: '0',
-                    marketCap: '0',
-                    volume: '0',
-                    changePercent24Hr: 0,
-                };
-            }
-            let volume = (0, bignumber_1.bn)('0');
-            let changePercent24Hr = 0;
-            const price = (0, bignumber_1.bnOrZero)(vault.underlyingTokenBalance.amountUsdc)
-                .div('1e+6')
-                .div(vault.underlyingTokenBalance.amount)
-                .times(`1e+${vault.decimals}`)
-                .times(vault.metadata.pricePerShare)
-                .div(`1e+${vault.decimals}`)
-                .toString();
-            const marketCap = (0, bignumber_1.bnOrZero)(vault.underlyingTokenBalance.amountUsdc).div('1e+6').toFixed(2);
-            const historicEarnings = vault.metadata.historicEarnings;
-            const lastHistoricalEarnings = historicEarnings
-                ? historicEarnings[historicEarnings.length - 1]
-                : null;
-            const secondToLastHistoricalEarnings = historicEarnings
-                ? historicEarnings[historicEarnings.length - 2]
-                : null;
-            if (lastHistoricalEarnings && secondToLastHistoricalEarnings) {
-                volume = (0, bignumber_1.bnOrZero)(lastHistoricalEarnings.earnings.amountUsdc)
-                    .minus(secondToLastHistoricalEarnings.earnings.amountUsdc)
-                    .div(`1e+${USDC_PRECISION}`)
-                    .dp(2);
-            }
-            if (lastHistoricalEarnings) {
-                changePercent24Hr =
-                    volume
-                        .div(lastHistoricalEarnings.earnings.amountUsdc)
-                        .times(`1e+${USDC_PRECISION}`)
-                        .toNumber() || 0;
-            }
-            return {
-                price,
-                marketCap,
-                volume: volume.abs().toString(),
-                changePercent24Hr,
-            };
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('YearnMarketService(findByAssetId): error fetching market data');
-        }
-    }
-    getDate(daysAgo) {
-        const date = new Date();
-        date.setDate(date.getDate() - daysAgo);
-        return date;
-    }
-    async findPriceHistoryByAssetId({ assetId, timeframe, }) {
-        const id = caip_1.adapters.assetIdToYearn(assetId);
-        if (!id)
-            return [];
-        try {
-            let daysAgo;
-            switch (timeframe) {
-                case types_1.HistoryTimeframe.HOUR:
-                    daysAgo = 2;
-                    break;
-                case types_1.HistoryTimeframe.DAY:
-                    daysAgo = 3;
-                    break;
-                case types_1.HistoryTimeframe.WEEK:
-                    daysAgo = 7;
-                    break;
-                case types_1.HistoryTimeframe.MONTH:
-                    daysAgo = 30;
-                    break;
-                case types_1.HistoryTimeframe.YEAR:
-                    daysAgo = 365;
-                    break;
-                case types_1.HistoryTimeframe.ALL:
-                    daysAgo = 3650;
-                    break;
-                default:
-                    daysAgo = 1;
-            }
-            const vaults = await rateLimiter(() => this.yearnSdk.vaults.get([id]));
-            if (!vaults || !vaults.length)
-                return [];
-            const decimals = vaults[0].decimals;
-            const params = {
-                id,
-                shareToken: id,
-                fromDate: this.getDate(daysAgo).getTime().toString(),
-                toDate: this.getDate(0).getTime().toString(),
-            };
-            const response = (await rateLimiter(() => this.yearnSdk.services.subgraph.fetchQuery(gql_queries_1.ACCOUNT_HISTORIC_EARNINGS, params)));
-            const vaultDayData = response.data.account.vaultPositions[0].vault.vaultDayData;
-            return vaultDayData.reduce((acc, current) => {
-                const date = Number(current.timestamp);
-                if (!(0, isValidDate_1.isValidDate)(date)) {
-                    console.error('Yearn SDK vault has invalid date');
-                    return acc;
-                }
-                const price = (0, bignumber_1.bn)(current.tokenPriceUSDC)
-                    .div(`1e+${USDC_PRECISION}`)
-                    .times(current.pricePerShare)
-                    .div(`1e+${decimals}`)
-                    .dp(6);
-                if (price.isNaN()) {
-                    console.error('Yearn SDK vault has invalid price');
-                    return acc;
-                }
-                acc.push({
-                    date,
-                    price: price.toNumber(),
-                });
-                return acc;
-            }, []);
-        }
-        catch (e) {
-            console.warn(e);
-            throw new Error('YearnMarketService(getPriceHistory): error fetching price history');
-        }
-    }
-}
-exports.YearnVaultMarketCapService = YearnVaultMarketCapService;
diff --git a/dist/yearn/yearnMockData.d.ts b/dist/yearn/yearnMockData.d.ts
deleted file mode 100644
index 4b95e1df0dd8d741582d441fa1e064a40e0ee6d4..0000000000000000000000000000000000000000
--- a/dist/yearn/yearnMockData.d.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-import { Token, Vault } from '@yfi/sdk';
-export declare const mockYearnVaultRestData: Vault[];
-export declare const mockYearnGQLData: {
-    data: {
-        account: {
-            vaultPositions: {
-                vault: {
-                    vaultDayData: {
-                        pricePerShare: string;
-                        timestamp: string;
-                        tokenPriceUSDC: string;
-                    }[];
-                };
-            }[];
-        };
-    };
-};
-export declare const mockYearnServiceFindAllData: {
-    'eip155:1/erc20:0xdcd90c7f6324cfa40d7169ef80b12031770b4325': {
-        price: string;
-        marketCap: string;
-        volume: string;
-        changePercent24Hr: number;
-    };
-    'eip155:1/erc20:0xa258c4606ca8206d8aa700ce2143d7db854d168c': {
-        price: string;
-        marketCap: string;
-        volume: string;
-        changePercent24Hr: number;
-    };
-    'eip155:1/erc20:0xda816459f1ab5631232fe5e97a05bbbb94970c95': {
-        price: string;
-        marketCap: string;
-        volume: string;
-        changePercent24Hr: number;
-    };
-    'eip155:1/erc20:0x5f18c75abdae578b483e5f43f12a39cf75b973a9': {
-        price: string;
-        marketCap: string;
-        volume: string;
-        changePercent24Hr: number;
-    };
-};
-export declare const mockYearnFindByAssetIdData: {
-    price: string;
-    marketCap: string;
-    volume: string;
-    changePercent24Hr: number;
-};
-export declare const mockYearnPriceHistoryData: {
-    price: number;
-    timestamp: number;
-}[];
-export declare const mockYearnTokenRestData: Token[];
diff --git a/dist/yearn/yearnMockData.js b/dist/yearn/yearnMockData.js
deleted file mode 100644
index de8b15da3a21b1483912b71721bb96da9133fcbf..0000000000000000000000000000000000000000
--- a/dist/yearn/yearnMockData.js
+++ /dev/null
@@ -1,317 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.mockYearnTokenRestData = exports.mockYearnPriceHistoryData = exports.mockYearnFindByAssetIdData = exports.mockYearnServiceFindAllData = exports.mockYearnGQLData = exports.mockYearnVaultRestData = void 0;
-exports.mockYearnVaultRestData = [
-    {
-        address: '0xcB550A6D4C8e3517A939BC79d0c7093eb7cF56B5',
-        typeId: 'VAULT_V2',
-        token: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
-        name: 'WBTC yVault',
-        version: '0.3.1',
-        symbol: 'yvWBTC',
-        decimals: '8',
-        tokenId: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
-        underlyingTokenBalance: { amount: '10858852', amountUsdc: '5353702158' },
-        metadata: {
-            controller: '0x0000000000000000000000000000000000000000',
-            totalAssets: '0',
-            totalSupply: '0',
-            symbol: 'yvWBTC',
-            pricePerShare: '100298599',
-            migrationAvailable: true,
-            latestVaultAddress: '0xA696a63cc78DfFa1a63E9E50587C197387FF6C7E',
-            depositLimit: '2100000000',
-            emergencyShutdown: false,
-            apy: {
-                type: 'n/a',
-                gross_apr: 0.020008669976326006,
-                net_apy: 0.00000780300855329763,
-                fees: {
-                    performance: 0.1,
-                    withdrawal: null,
-                    management: 0.02,
-                    keep_crv: null,
-                    cvx_keep_crv: null,
-                },
-                points: {
-                    week_ago: 0.00000780300855329763,
-                    month_ago: 0.000001793590841403514,
-                    inception: 0.0040986514460876755,
-                },
-                composite: null,
-            },
-            displayIcon: 'https://raw.githack.com/yearn/yearn-assets/master/icons/multichain-tokens/1/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo-128.png',
-            displayName: 'WBTC',
-            defaultDisplayToken: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
-            depositsDisabled: true,
-            withdrawalsDisabled: false,
-            allowZapIn: false,
-            allowZapOut: true,
-            migrationContract: '0x1824df8D751704FA10FA371d62A37f9B8772ab90',
-            migrationTargetVault: '0xA696a63cc78DfFa1a63E9E50587C197387FF6C7E',
-            hideIfNoDeposits: true,
-            historicEarnings: [
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-09T23:59:19.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-27T17:34:01.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-27T17:34:01.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4368298565', amount: '9235827' },
-                    date: '2021-11-27T17:34:01.000Z',
-                },
-                {
-                    earnings: { amountUsdc: '4568298565', amount: '9265827' },
-                    date: '2021-11-30T21:11:26.000Z',
-                },
-            ],
-        },
-    },
-    {
-        address: '0x19D3364A399d251E894aC732651be8B0E4e85001',
-        typeId: 'VAULT_V2',
-        token: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
-        name: 'DAI yVault',
-        version: '0.3.0',
-        symbol: 'yvDAI',
-        decimals: '18',
-        tokenId: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
-        underlyingTokenBalance: {
-            amount: '3749544503309184323796587',
-            amountUsdc: '3754148943959',
-        },
-        metadata: {
-            controller: '0x0000000000000000000000000000000000000000',
-            totalAssets: '0',
-            totalSupply: '0',
-            pricePerShare: '1084750123794815921',
-            symbol: 'yvDAI',
-            migrationAvailable: true,
-            latestVaultAddress: '0xdA816459F1AB5631232FE5e97a05BBBb94970c95',
-            depositLimit: '0',
-            emergencyShutdown: false,
-            apy: {
-                type: 'n/a',
-                gross_apr: 0.029072791659551456,
-                net_apy: 0.029491166945441627,
-                fees: {
-                    performance: 0,
-                    withdrawal: null,
-                    management: 0,
-                    keep_crv: null,
-                    cvx_keep_crv: null,
-                },
-                points: {
-                    week_ago: 0,
-                    month_ago: 0.029491166945441627,
-                    inception: 0.09396663217129686,
-                },
-                composite: null,
-            },
-            displayIcon: 'https://raw.githack.com/yearn/yearn-assets/master/icons/multichain-tokens/1/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo-128.png',
-            displayName: 'DAI',
-            defaultDisplayToken: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
-            depositsDisabled: true,
-            withdrawalsDisabled: false,
-            allowZapIn: false,
-            allowZapOut: true,
-            migrationContract: '0x1824df8D751704FA10FA371d62A37f9B8772ab90',
-            migrationTargetVault: '0xdA816459F1AB5631232FE5e97a05BBBb94970c95',
-            hideIfNoDeposits: true,
-            strategies: {
-                vaultAddress: '0x19D3364A399d251E894aC732651be8B0E4e85001',
-                strategiesMetadata: [
-                    {
-                        address: '0x3D6532c589A11117a4494d9725bb8518C731f1Be',
-                        name: 'Routeryvdai043',
-                        description: "I don't have a description for this strategy yet",
-                        protocols: [],
-                    },
-                ],
-            },
-            historicEarnings: [
-                {
-                    earnings: {
-                        amountUsdc: '21408471734966',
-                        amount: '21382214375712138070254065',
-                    },
-                    date: '2021-11-17T02:25:49.000Z',
-                },
-                {
-                    earnings: {
-                        amountUsdc: '21408471734966',
-                        amount: '21382214375712138070254065',
-                    },
-                    date: '2021-11-20T07:19:47.000Z',
-                },
-                {
-                    earnings: {
-                        amountUsdc: '21408471734966',
-                        amount: '21382214375712138070254065',
-                    },
-                    date: '2021-11-21T00:51:34.000Z',
-                },
-                {
-                    earnings: {
-                        amountUsdc: '21308471734966',
-                        amount: '21282214375712138070254065',
-                    },
-                    date: '2021-11-21T00:51:34.000Z',
-                },
-                {
-                    earnings: {
-                        amountUsdc: '21408471734966',
-                        amount: '21382214375712138070254065',
-                    },
-                    date: '2021-11-22T10:39:27.000Z',
-                },
-            ],
-        },
-    },
-];
-exports.mockYearnGQLData = {
-    data: {
-        account: {
-            vaultPositions: [
-                {
-                    vault: {
-                        vaultDayData: [
-                            {
-                                pricePerShare: '1082124440389265991',
-                                timestamp: '1639132035000',
-                                tokenPriceUSDC: '999932',
-                            },
-                            {
-                                pricePerShare: '1082124440389265991',
-                                timestamp: '1639241453000',
-                                tokenPriceUSDC: '1000000',
-                            },
-                            {
-                                pricePerShare: '1082124440389265991',
-                                timestamp: '1639269839000',
-                                tokenPriceUSDC: '999963',
-                            },
-                            {
-                                pricePerShare: '1084750123794815921',
-                                timestamp: '1639441831000',
-                                tokenPriceUSDC: '1000418',
-                            },
-                            {
-                                pricePerShare: '1084750123794815921',
-                                timestamp: '1639530562000',
-                                tokenPriceUSDC: '1001033',
-                            },
-                        ],
-                    },
-                },
-            ],
-        },
-    },
-};
-exports.mockYearnServiceFindAllData = {
-    'eip155:1/erc20:0xdcd90c7f6324cfa40d7169ef80b12031770b4325': {
-        price: '4468.08',
-        marketCap: '937771950.77',
-        volume: '5932398898',
-        changePercent24Hr: 2.1380553852e-10,
-    },
-    'eip155:1/erc20:0xa258c4606ca8206d8aa700ce2143d7db854d168c': {
-        price: '4062.35',
-        marketCap: '864888828.22',
-        volume: '0',
-        changePercent24Hr: 0,
-    },
-    'eip155:1/erc20:0xda816459f1ab5631232fe5e97a05bbbb94970c95': {
-        price: '1.02',
-        marketCap: '547790387.55',
-        volume: '108391293604',
-        changePercent24Hr: 7.67881567474e-9,
-    },
-    'eip155:1/erc20:0x5f18c75abdae578b483e5f43f12a39cf75b973a9': {
-        price: '1.09',
-        marketCap: '280969149.48',
-        volume: '55430827858',
-        changePercent24Hr: 1.93301855857e-9,
-    },
-};
-exports.mockYearnFindByAssetIdData = {
-    price: '1234',
-    marketCap: '1564876159',
-    volume: '509787461',
-    changePercent24Hr: -3.5487,
-};
-exports.mockYearnPriceHistoryData = [
-    {
-        price: 456789,
-        timestamp: 123456,
-    },
-    {
-        price: 556789,
-        timestamp: 223456,
-    },
-    {
-        price: 656789,
-        timestamp: 323456,
-    },
-];
-exports.mockYearnTokenRestData = [
-    {
-        address: '0xcB550A6D4C8e3517A939BC79d0c7093eb7cF56B5',
-        name: 'WBTC yVault',
-        symbol: 'yvWBTC',
-        decimals: '8',
-        priceUsdc: '50000000000',
-        supported: {},
-    },
-    {
-        address: '0x19D3364A399d251E894aC732651be8B0E4e85001',
-        name: 'DAI yVault',
-        symbol: 'yvDAI',
-        decimals: '18',
-        priceUsdc: '990000',
-        supported: {},
-    },
-];
diff --git a/package.json b/package.json
index 87f95fc4ad3ecb067714df80022e557ca99f6d9d..941f190fdba5fd4bb5c0b0ce84b79aad13a8c2f1 100644
--- a/package.json
+++ b/package.json
@@ -23,12 +23,9 @@
     "dev": "tsc --watch",
     "prepare": "yarn build",
     "test": "jest test",
-    "type-check": "tsc --project ./tsconfig.build.json --noEmit",
-    "marketcli": "yarn build && node ./dist/marketDataCLI.js"
+    "type-check": "tsc --project ./tsconfig.build.json --noEmit"
   },
   "dependencies": {
-    "@ethersproject/providers": "^5.5.3",
-    "@yfi/sdk": "^1.2.0",
     "axios": "^0.26.1",
     "axios-rate-limit": "^1.3.0",
     "bignumber.js": "^9.0.2",
@@ -37,17 +34,11 @@
   },
   "peerDependencies": {
     "@shapeshiftoss/caip": "^8.0.0",
-    "@shapeshiftoss/chain-adapters": "^10.0.0",
-    "@shapeshiftoss/investor-foxy": "^7.0.0",
-    "@shapeshiftoss/types": "^8.1.0",
-    "@shapeshiftoss/unchained-client": "^10.0.1"
+    "@shapeshiftoss/types": "^8.1.0"
   },
   "devDependencies": {
     "@shapeshiftoss/caip": "^8.0.0",
-    "@shapeshiftoss/chain-adapters": "^10.0.0",
-    "@shapeshiftoss/investor-foxy": "^7.0.0",
     "@shapeshiftoss/types": "^8.1.0",
-    "@shapeshiftoss/unchained-client": "^10.0.1",
     "limiter": "^2.1.0"
   }
 }
